{"mappings":"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","sources":["scripts/libs/mustache.js","node_modules/@swc/helpers/src/_type_of.js","scripts/helper_ui.js","scripts/helper_events.js","scripts/app.js"],"sourcesContent":["/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\nvar objectToString = Object.prototype.toString;\r\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\r\n  return objectToString.call(object) === '[object Array]';\r\n};\r\n\r\nfunction isFunction (object) {\r\n  return typeof object === 'function';\r\n}\r\n\r\n/**\r\n * More correct typeof string handling array\r\n * which normally returns typeof 'object'\r\n */\r\nfunction typeStr (obj) {\r\n  return isArray(obj) ? 'array' : typeof obj;\r\n}\r\n\r\nfunction escapeRegExp (string) {\r\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Null safe way of checking whether or not an object,\r\n * including its prototype, has a given property\r\n */\r\nfunction hasProperty (obj, propName) {\r\n  return obj != null && typeof obj === 'object' && (propName in obj);\r\n}\r\n\r\n/**\r\n * Safe way of detecting whether or not the given thing is a primitive and\r\n * whether it has the given property\r\n */\r\nfunction primitiveHasOwnProperty (primitive, propName) {\r\n  return (\r\n    primitive != null\r\n    && typeof primitive !== 'object'\r\n    && primitive.hasOwnProperty\r\n    && primitive.hasOwnProperty(propName)\r\n  );\r\n}\r\n\r\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n// See https://github.com/janl/mustache.js/issues/189\r\nvar regExpTest = RegExp.prototype.test;\r\nfunction testRegExp (re, string) {\r\n  return regExpTest.call(re, string);\r\n}\r\n\r\nvar nonSpaceRe = /\\S/;\r\nfunction isWhitespace (string) {\r\n  return !testRegExp(nonSpaceRe, string);\r\n}\r\n\r\nvar entityMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;',\r\n  '/': '&#x2F;',\r\n  '`': '&#x60;',\r\n  '=': '&#x3D;'\r\n};\r\n\r\nfunction escapeHtml (string) {\r\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\r\n    return entityMap[s];\r\n  });\r\n}\r\n\r\nvar whiteRe = /\\s*/;\r\nvar spaceRe = /\\s+/;\r\nvar equalsRe = /\\s*=/;\r\nvar curlyRe = /\\s*\\}/;\r\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\r\n\r\n/**\r\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n * argument is given here it must be an array with two string values: the\r\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n * course, the default is to use mustaches (i.e. mustache.tags).\r\n *\r\n * A token is an array with at least 4 elements. The first element is the\r\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n * all text that appears outside a symbol this element is \"text\".\r\n *\r\n * The second element of a token is its \"value\". For mustache tags this is\r\n * whatever else was inside the tag besides the opening symbol. For text tokens\r\n * this is the text itself.\r\n *\r\n * The third and fourth elements of the token are the start and end indices,\r\n * respectively, of the token in the original template.\r\n *\r\n * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n * array of tokens in the subtree and 2) the index in the original template at\r\n * which the closing tag for that section begins.\r\n *\r\n * Tokens for partials also contain two more elements: 1) a string value of\r\n * indendation prior to that tag and 2) the index of that tag on that line -\r\n * eg a value of 2 indicates the partial is the third tag on this line.\r\n */\r\nfunction parseTemplate (template, tags) {\r\n  if (!template)\r\n    return [];\r\n  var lineHasNonSpace = false;\r\n  var sections = [];     // Stack to hold section tokens\r\n  var tokens = [];       // Buffer to hold the tokens\r\n  var spaces = [];       // Indices of whitespace tokens on the current line\r\n  var hasTag = false;    // Is there a {{tag}} on the current line?\r\n  var nonSpace = false;  // Is there a non-space char on the current line?\r\n  var indentation = '';  // Tracks indentation for tags that use it\r\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\r\n\r\n  // Strips all whitespace tokens array for the current line\r\n  // if there was a {{#tag}} on it and otherwise only space.\r\n  function stripSpace () {\r\n    if (hasTag && !nonSpace) {\r\n      while (spaces.length)\r\n        delete tokens[spaces.pop()];\r\n    } else {\r\n      spaces = [];\r\n    }\r\n\r\n    hasTag = false;\r\n    nonSpace = false;\r\n  }\r\n\r\n  var openingTagRe, closingTagRe, closingCurlyRe;\r\n  function compileTags (tagsToCompile) {\r\n    if (typeof tagsToCompile === 'string')\r\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n      throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n  }\r\n\r\n  compileTags(tags || mustache.tags);\r\n\r\n  var scanner = new Scanner(template);\r\n\r\n  var start, type, value, chr, token, openSection;\r\n  while (!scanner.eos()) {\r\n    start = scanner.pos;\r\n\r\n    // Match any text between tags.\r\n    value = scanner.scanUntil(openingTagRe);\r\n\r\n    if (value) {\r\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n        chr = value.charAt(i);\r\n\r\n        if (isWhitespace(chr)) {\r\n          spaces.push(tokens.length);\r\n          indentation += chr;\r\n        } else {\r\n          nonSpace = true;\r\n          lineHasNonSpace = true;\r\n          indentation += ' ';\r\n        }\r\n\r\n        tokens.push([ 'text', chr, start, start + 1 ]);\r\n        start += 1;\r\n\r\n        // Check for whitespace on the current line.\r\n        if (chr === '\\n') {\r\n          stripSpace();\r\n          indentation = '';\r\n          tagIndex = 0;\r\n          lineHasNonSpace = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Match the opening tag.\r\n    if (!scanner.scan(openingTagRe))\r\n      break;\r\n\r\n    hasTag = true;\r\n\r\n    // Get the tag type.\r\n    type = scanner.scan(tagRe) || 'name';\r\n    scanner.scan(whiteRe);\r\n\r\n    // Get the tag value.\r\n    if (type === '=') {\r\n      value = scanner.scanUntil(equalsRe);\r\n      scanner.scan(equalsRe);\r\n      scanner.scanUntil(closingTagRe);\r\n    } else if (type === '{') {\r\n      value = scanner.scanUntil(closingCurlyRe);\r\n      scanner.scan(curlyRe);\r\n      scanner.scanUntil(closingTagRe);\r\n      type = '&';\r\n    } else {\r\n      value = scanner.scanUntil(closingTagRe);\r\n    }\r\n\r\n    // Match the closing tag.\r\n    if (!scanner.scan(closingTagRe))\r\n      throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n    if (type == '>') {\r\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\r\n    } else {\r\n      token = [ type, value, start, scanner.pos ];\r\n    }\r\n    tagIndex++;\r\n    tokens.push(token);\r\n\r\n    if (type === '#' || type === '^') {\r\n      sections.push(token);\r\n    } else if (type === '/') {\r\n      // Check section nesting.\r\n      openSection = sections.pop();\r\n\r\n      if (!openSection)\r\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n\r\n      if (openSection[1] !== value)\r\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\r\n    } else if (type === 'name' || type === '{' || type === '&') {\r\n      nonSpace = true;\r\n    } else if (type === '=') {\r\n      // Set the tags for the next time around.\r\n      compileTags(value);\r\n    }\r\n  }\r\n\r\n  stripSpace();\r\n\r\n  // Make sure there are no open sections when we're done.\r\n  openSection = sections.pop();\r\n\r\n  if (openSection)\r\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n  return nestTokens(squashTokens(tokens));\r\n}\r\n\r\n/**\r\n * Combines the values of consecutive text tokens in the given `tokens` array\r\n * to a single token.\r\n */\r\nfunction squashTokens (tokens) {\r\n  var squashedTokens = [];\r\n\r\n  var token, lastToken;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    if (token) {\r\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n        lastToken[1] += token[1];\r\n        lastToken[3] = token[3];\r\n      } else {\r\n        squashedTokens.push(token);\r\n        lastToken = token;\r\n      }\r\n    }\r\n  }\r\n\r\n  return squashedTokens;\r\n}\r\n\r\n/**\r\n * Forms the given array of `tokens` into a nested tree structure where\r\n * tokens that represent a section have two additional items: 1) an array of\r\n * all tokens that appear in that section and 2) the index in the original\r\n * template that represents the end of that section.\r\n */\r\nfunction nestTokens (tokens) {\r\n  var nestedTokens = [];\r\n  var collector = nestedTokens;\r\n  var sections = [];\r\n\r\n  var token, section;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    switch (token[0]) {\r\n      case '#':\r\n      case '^':\r\n        collector.push(token);\r\n        sections.push(token);\r\n        collector = token[4] = [];\r\n        break;\r\n      case '/':\r\n        section = sections.pop();\r\n        section[5] = token[2];\r\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n        break;\r\n      default:\r\n        collector.push(token);\r\n    }\r\n  }\r\n\r\n  return nestedTokens;\r\n}\r\n\r\n/**\r\n * A simple string scanner that is used by the template parser to find\r\n * tokens in template strings.\r\n */\r\nfunction Scanner (string) {\r\n  this.string = string;\r\n  this.tail = string;\r\n  this.pos = 0;\r\n}\r\n\r\n/**\r\n * Returns `true` if the tail is empty (end of string).\r\n */\r\nScanner.prototype.eos = function eos () {\r\n  return this.tail === '';\r\n};\r\n\r\n/**\r\n * Tries to match the given regular expression at the current position.\r\n * Returns the matched text if it can match, the empty string otherwise.\r\n */\r\nScanner.prototype.scan = function scan (re) {\r\n  var match = this.tail.match(re);\r\n\r\n  if (!match || match.index !== 0)\r\n    return '';\r\n\r\n  var string = match[0];\r\n\r\n  this.tail = this.tail.substring(string.length);\r\n  this.pos += string.length;\r\n\r\n  return string;\r\n};\r\n\r\n/**\r\n * Skips all text until the given regular expression can be matched. Returns\r\n * the skipped string, which is the entire tail if no match can be made.\r\n */\r\nScanner.prototype.scanUntil = function scanUntil (re) {\r\n  var index = this.tail.search(re), match;\r\n\r\n  switch (index) {\r\n    case -1:\r\n      match = this.tail;\r\n      this.tail = '';\r\n      break;\r\n    case 0:\r\n      match = '';\r\n      break;\r\n    default:\r\n      match = this.tail.substring(0, index);\r\n      this.tail = this.tail.substring(index);\r\n  }\r\n\r\n  this.pos += match.length;\r\n\r\n  return match;\r\n};\r\n\r\n/**\r\n * Represents a rendering context by wrapping a view object and\r\n * maintaining a reference to the parent context.\r\n */\r\nfunction Context (view, parentContext) {\r\n  this.view = view;\r\n  this.cache = { '.': this.view };\r\n  this.parent = parentContext;\r\n}\r\n\r\n/**\r\n * Creates a new context using the given view with this context\r\n * as the parent.\r\n */\r\nContext.prototype.push = function push (view) {\r\n  return new Context(view, this);\r\n};\r\n\r\n/**\r\n * Returns the value of the given name in this context, traversing\r\n * up the context hierarchy if the value is absent in this context's view.\r\n */\r\nContext.prototype.lookup = function lookup (name) {\r\n  var cache = this.cache;\r\n\r\n  var value;\r\n  if (cache.hasOwnProperty(name)) {\r\n    value = cache[name];\r\n  } else {\r\n    var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n    while (context) {\r\n      if (name.indexOf('.') > 0) {\r\n        intermediateValue = context.view;\r\n        names = name.split('.');\r\n        index = 0;\r\n\r\n        /**\r\n         * Using the dot notion path in `name`, we descend through the\r\n         * nested objects.\r\n         *\r\n         * To be certain that the lookup has been successful, we have to\r\n         * check if the last object in the path actually has the property\r\n         * we are looking for. We store the result in `lookupHit`.\r\n         *\r\n         * This is specially necessary for when the value has been set to\r\n         * `undefined` and we want to avoid looking up parent contexts.\r\n         *\r\n         * In the case where dot notation is used, we consider the lookup\r\n         * to be successful even if the last \"object\" in the path is\r\n         * not actually an object but a primitive (e.g., a string, or an\r\n         * integer), because it is sometimes useful to access a property\r\n         * of an autoboxed primitive, such as the length of a string.\r\n         **/\r\n        while (intermediateValue != null && index < names.length) {\r\n          if (index === names.length - 1)\r\n            lookupHit = (\r\n              hasProperty(intermediateValue, names[index])\r\n              || primitiveHasOwnProperty(intermediateValue, names[index])\r\n            );\r\n\r\n          intermediateValue = intermediateValue[names[index++]];\r\n        }\r\n      } else {\r\n        intermediateValue = context.view[name];\r\n\r\n        /**\r\n         * Only checking against `hasProperty`, which always returns `false` if\r\n         * `context.view` is not an object. Deliberately omitting the check\r\n         * against `primitiveHasOwnProperty` if dot notation is not used.\r\n         *\r\n         * Consider this example:\r\n         * ```\r\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n         * ```\r\n         *\r\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n         * in the dot notation case, then render call would return:\r\n         *\r\n         * \"The length of a football field is 9.\"\r\n         *\r\n         * rather than the expected:\r\n         *\r\n         * \"The length of a football field is 100 yards.\"\r\n         **/\r\n        lookupHit = hasProperty(context.view, name);\r\n      }\r\n\r\n      if (lookupHit) {\r\n        value = intermediateValue;\r\n        break;\r\n      }\r\n\r\n      context = context.parent;\r\n    }\r\n\r\n    cache[name] = value;\r\n  }\r\n\r\n  if (isFunction(value))\r\n    value = value.call(this.view);\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * A Writer knows how to take a stream of tokens and render them to a\r\n * string, given a context. It also maintains a cache of templates to\r\n * avoid the need to parse the same template twice.\r\n */\r\nfunction Writer () {\r\n  this.templateCache = {\r\n    _cache: {},\r\n    set: function set (key, value) {\r\n      this._cache[key] = value;\r\n    },\r\n    get: function get (key) {\r\n      return this._cache[key];\r\n    },\r\n    clear: function clear () {\r\n      this._cache = {};\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Clears all cached templates in this writer.\r\n */\r\nWriter.prototype.clearCache = function clearCache () {\r\n  if (typeof this.templateCache !== 'undefined') {\r\n    this.templateCache.clear();\r\n  }\r\n};\r\n\r\n/**\r\n * Parses and caches the given `template` according to the given `tags` or\r\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n * that is generated from the parse.\r\n */\r\nWriter.prototype.parse = function parse (template, tags) {\r\n  var cache = this.templateCache;\r\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n  var isCacheEnabled = typeof cache !== 'undefined';\r\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\r\n\r\n  if (tokens == undefined) {\r\n    tokens = parseTemplate(template, tags);\r\n    isCacheEnabled && cache.set(cacheKey, tokens);\r\n  }\r\n  return tokens;\r\n};\r\n\r\n/**\r\n * High-level method that is used to render the given `template` with\r\n * the given `view`.\r\n *\r\n * The optional `partials` argument may be an object that contains the\r\n * names and templates of partials that are used in the template. It may\r\n * also be a function that is used to load partial templates on the fly\r\n * that takes a single argument: the name of the partial.\r\n *\r\n * If the optional `config` argument is given here, then it should be an\r\n * object with a `tags` attribute or an `escape` attribute or both.\r\n * If an array is passed, then it will be interpreted the same way as\r\n * a `tags` attribute on a `config` object.\r\n *\r\n * The `tags` attribute of a `config` object must be an array with two\r\n * string values: the opening and closing tags used in the template (e.g.\r\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n *\r\n * The `escape` attribute of a `config` object must be a function which\r\n * accepts a string as input and outputs a safely escaped string.\r\n * If an `escape` function is not provided, then an HTML-safe string\r\n * escaping function is used as the default.\r\n */\r\nWriter.prototype.render = function render (template, view, partials, config) {\r\n  var tags = this.getConfigTags(config);\r\n  var tokens = this.parse(template, tags);\r\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\r\n  return this.renderTokens(tokens, context, partials, template, config);\r\n};\r\n\r\n/**\r\n * Low-level method that renders the given array of `tokens` using\r\n * the given `context` and `partials`.\r\n *\r\n * Note: The `originalTemplate` is only ever used to extract the portion\r\n * of the original template that was contained in a higher-order section.\r\n * If the template doesn't use higher-order sections, this argument may\r\n * be omitted.\r\n */\r\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\r\n  var buffer = '';\r\n\r\n  var token, symbol, value;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    value = undefined;\r\n    token = tokens[i];\r\n    symbol = token[0];\r\n\r\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\r\n    else if (symbol === '&') value = this.unescapedValue(token, context);\r\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\r\n    else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n    if (value !== undefined)\r\n      buffer += value;\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\r\n  var self = this;\r\n  var buffer = '';\r\n  var value = context.lookup(token[1]);\r\n\r\n  // This function is used to render an arbitrary template\r\n  // in the current context by higher-order sections.\r\n  function subRender (template) {\r\n    return self.render(template, context, partials, config);\r\n  }\r\n\r\n  if (!value) return;\r\n\r\n  if (isArray(value)) {\r\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\r\n    }\r\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\r\n  } else if (isFunction(value)) {\r\n    if (typeof originalTemplate !== 'string')\r\n      throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n    // Extract the portion of the original template that the section contains.\r\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\r\n\r\n    if (value != null)\r\n      buffer += value;\r\n  } else {\r\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n  }\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\r\n  var value = context.lookup(token[1]);\r\n\r\n  // Use JavaScript's definition of falsy. Include empty arrays.\r\n  // See https://github.com/janl/mustache.js/issues/186\r\n  if (!value || (isArray(value) && value.length === 0))\r\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n};\r\n\r\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\r\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\r\n  var partialByNl = partial.split('\\n');\r\n  for (var i = 0; i < partialByNl.length; i++) {\r\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\r\n      partialByNl[i] = filteredIndentation + partialByNl[i];\r\n    }\r\n  }\r\n  return partialByNl.join('\\n');\r\n};\r\n\r\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\r\n  if (!partials) return;\r\n  var tags = this.getConfigTags(config);\r\n\r\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n  if (value != null) {\r\n    var lineHasNonSpace = token[6];\r\n    var tagIndex = token[5];\r\n    var indentation = token[4];\r\n    var indentedValue = value;\r\n    if (tagIndex == 0 && indentation) {\r\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\r\n    }\r\n    var tokens = this.parse(indentedValue, tags);\r\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\r\n  }\r\n};\r\n\r\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return value;\r\n};\r\n\r\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\r\n  var escape = this.getConfigEscape(config) || mustache.escape;\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\r\n};\r\n\r\nWriter.prototype.rawValue = function rawValue (token) {\r\n  return token[1];\r\n};\r\n\r\nWriter.prototype.getConfigTags = function getConfigTags (config) {\r\n  if (isArray(config)) {\r\n    return config;\r\n  }\r\n  else if (config && typeof config === 'object') {\r\n    return config.tags;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\r\n  if (config && typeof config === 'object' && !isArray(config)) {\r\n    return config.escape;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nvar mustache = {\r\n  name: 'mustache.js',\r\n  version: '4.2.0',\r\n  tags: [ '{{', '}}' ],\r\n  clearCache: undefined,\r\n  escape: undefined,\r\n  parse: undefined,\r\n  render: undefined,\r\n  Scanner: undefined,\r\n  Context: undefined,\r\n  Writer: undefined,\r\n  /**\r\n   * Allows a user to override the default caching strategy, by providing an\r\n   * object with set, get and clear methods. This can also be used to disable\r\n   * the cache by setting it to the literal `undefined`.\r\n   */\r\n  set templateCache (cache) {\r\n    defaultWriter.templateCache = cache;\r\n  },\r\n  /**\r\n   * Gets the default or overridden caching object from the default writer.\r\n   */\r\n  get templateCache () {\r\n    return defaultWriter.templateCache;\r\n  }\r\n};\r\n\r\n// All high-level mustache.* functions use this writer.\r\nvar defaultWriter = new Writer();\r\n\r\n/**\r\n * Clears all cached templates in the default writer.\r\n */\r\nmustache.clearCache = function clearCache () {\r\n  return defaultWriter.clearCache();\r\n};\r\n\r\n/**\r\n * Parses and caches the given template in the default writer and returns the\r\n * array of tokens it contains. Doing this ahead of time avoids the need to\r\n * parse templates on the fly as they are rendered.\r\n */\r\nmustache.parse = function parse (template, tags) {\r\n  return defaultWriter.parse(template, tags);\r\n};\r\n\r\n/**\r\n * Renders the `template` with the given `view`, `partials`, and `config`\r\n * using the default writer.\r\n */\r\nmustache.render = function render (template, view, partials, config) {\r\n  if (typeof template !== 'string') {\r\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\r\n                        'argument for mustache#render(template, view, partials)');\r\n  }\r\n\r\n  return defaultWriter.render(template, view, partials, config);\r\n};\r\n\r\n// Export the escaping function so that the user may override it.\r\n// See https://github.com/janl/mustache.js/issues/244\r\nmustache.escape = escapeHtml;\r\n\r\n// Export these mainly for testing, but also for advanced usage.\r\nmustache.Scanner = Scanner;\r\nmustache.Context = Context;\r\nmustache.Writer = Writer;\r\n\r\nexport default mustache;","export default function _typeof(obj) {\n    return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n","import mustache from \"./libs/mustache.js\";\r\n\r\nimport { events } from \"./helper_events.js\";\r\n\r\nexport const UI = {};\r\n\r\nUI.get = {\r\n    innerHTML: (source) => {\r\n        return source.innerHTML;\r\n    },\r\n    textContent: (source) => {\r\n        return source.textContent;\r\n    },\r\n    value: (source) => {\r\n        return source.value;\r\n    },\r\n    template: (source) => {\r\n\r\n        let selector = `[data-for='${source.id || source.name}']`;\r\n\r\n        let html = document.querySelector(selector).innerHTML;\r\n\r\n        //TODO: Implement Context\r\n        let rendered = mustache.render(html, {});\r\n\r\n        return rendered;\r\n    }\r\n}\r\n\r\nUI.set = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = data;\r\n        return `target HTML is now ${data}`;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = data;\r\n        return `target text is now ${data}`;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = data;\r\n        return `target value is now ${data}`;\r\n    }\r\n}\r\n\r\nUI.add = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = target.innerHTML + data;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = target.textContent + data;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = target.value + data;\r\n    }\r\n}\r\n\r\nconst closeModal = () => {\r\n    document.getElementById(\"ModalWrapper\")?.remove();\r\n};\r\n\r\nUI.modal = (content) => {\r\n\r\n    events.click.closeModal = events.click.closeModal || closeModal;\r\n\r\n    let template = `<div data-click=\"closeModal\" id=\"ModalContent\">${content}</div>`;\r\n\r\n    let wrapper = document.createElement(\"div\");\r\n\r\n    wrapper.id = \"ModalWrapper\";\r\n\r\n    wrapper.dataset.click = \"closeModal\";\r\n\r\n    wrapper.innerHTML = template;\r\n\r\n    document.body.appendChild(wrapper);\r\n};\r\n\r\nUI.alert = (message) => {\r\n    let template = `<h1>Alert</h1><hr><div id=\"Alert\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n\r\n};\r\n\r\nUI.warning = (message) => {\r\n\r\n    let template = `<h1>Warning</h1><hr><div id=\"Warning\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n\r\n    return false;\r\n};\r\n\r\nUI.confirm = (message, ifYes, ifNo) => {\r\n\r\n    let template = `<h1>Confirm</h1><hr>\r\n                    <div id=\"Confirm\">${message}<hr>\r\n                    <button data-click=\"confirmYes\">Yes</button>\r\n                    <button data-click=\"confirmNo\">No</button>\r\n                    </div>`;\r\n\r\n    events.click.confirmYes = () => {\r\n        closeModal();\r\n        ifYes?.();\r\n    };\r\n\r\n    events.click.confirmNo = () => {\r\n        closeModal();\r\n        ifNo?.();\r\n    };\r\n\r\n    UI.modal(template);\r\n\r\n};\r\n\r\nUI.textInput = (callback) => {\r\n\r\n    let template = `<h2>Input Text</h2>\r\n                    <textarea id=\"TextInput\" class=\"modal-input\">Copy/Paste Here</textarea>\r\n                    <hr>\r\n                    <button data-click=\"processTextInput\">Continue</button>\r\n                    `;\r\n\r\n    events.click.processTextInput = (e) => {\r\n\r\n        let text = document.getElementById(\"TextInput\").value;\r\n\r\n        closeModal();\r\n\r\n        callback.call(e.target, text);        \r\n    };\r\n\r\n    UI.modal(template);\r\n};\r\n\r\n\r\n\r\n// Mustache\r\n\r\n// let exampleFunc =  function () {\r\n//     return function (object, render) {\r\n//         var rendered = render(object);\r\n//          return rendered;          \r\n//     };\r\n// },","import { UI } from \"./helper_ui.js\";\r\n\r\nexport const events = {\r\n    click: {},\r\n    change: {},\r\n    keyup: {},\r\n    actions: {}\r\n};\r\n\r\nconst triggerEvent = (name, data, element) => {\r\n    let eventData = { detail: data };\r\n    let event = new CustomEvent(name, eventData);\r\n\r\n    element = element ?? document;\r\n\r\n    element.dispatchEvent?.(event, eventData);\r\n};\r\n\r\nconst triggerEventAll = (name, data, selector) => {\r\n\r\n   try{\r\n    let elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach((item) => {\r\n        triggerEvent(name, data, item);\r\n    });\r\n\r\n   }catch(er){\r\n       UI.warning(er.message ?? \"Unknown Error\");\r\n   }\r\n};\r\n","import { events } from './helper_events.js';\r\n\r\n\r\n/**\r\n * Here we add event listeners and setup the app. \r\n */\r\ndocument.body.addEventListener(\"keyup\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.keyup[source.dataset.keyup]?.(source, e);\r\n});\r\n\r\ndocument.body.addEventListener(\"change\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.change[source.dataset.change]?.(source, e);\r\n});\r\n\r\ndocument.body.addEventListener(\"click\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.click[source.dataset.click]?.(source, e);\r\n});\r\n\r\ndocument.body.onload = () => {\r\n\r\n\r\n};\r\n\r\n"],"names":["Array","isArray","object","call","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","RegExp","prototype","test","re","regExpTest","testRegExp","nonSpaceRe",">","\"","'","/","`","=","curlyRe","tagRe","Scanner","Context","view","parentContext","cache",".","this","parent","Writer","templateCache","_cache","key","value","tail","match","index","length","search","substring","hasOwnProperty","name","intermediateValue","names","context","lookupHit","indexOf","split","primitive","clearCache","clear","parse","template","tags","cacheKey","mustache","join","isCacheEnabled","tokens","get","undefined","closingTagRe","closingCurlyRe","stripSpace","hasTag","nonSpace","spaces","pop","tagsToCompile","Error","type","chr","token","openSection","scanner","eos","pos","scanUntil","openingTagRe","i","valueLength","isWhitespace","charAt","push","indentation","lineHasNonSpace","start","scan","whiteRe","equalsRe","tagIndex","sections","collector","nestedTokens","lastToken","numTokens","squashedTokens","parseTemplate","set","$73eJY","default","String","s","entityMap","constructor","Symbol","$091dd10a0ceba2fe9ee4e41b8a1e11f0$export$3dac98e9aceb97ba","innerHTML","source","textContent","selector","concat","id","html","document","querySelector","$3Kbcj","render","target","data","add","$091dd10a0ceba2fe9ee4e41b8a1e11f0$var$closeModal","ref","getElementById","remove","modal","content","$bd74da6b178ad2641259c408b53b24da$export$fc4ac6ce2f1d593c","click","closeModal","wrapper","createElement","dataset","body","appendChild","alert","message","warning","confirm","ifYes","ifNo","confirmYes","confirmNo","textInput","callback","processTextInput","e","text","change","keyup","actions","addEventListener","_keyup","_change","_click"],"version":3,"file":"index.33e82fd0.js.map"}